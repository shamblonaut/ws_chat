<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebSocket Chat</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        height: 100vh;
        overflow: hidden;
        font-family: Arial, sans-serif;
        position: relative;
      }
      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        background-color: #f0f0f0;
        position: relative;
      }

      .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: none;
        background-color: #00000080;
        z-index: 1;
      }
      .overlay.visible {
        display: block;
      }

      .chat-name,
      .pane-header {
        background-color: #4a69bd;
        color: white;
        padding: 16px;
        text-align: center;
        font-size: 1.5em;
      }
      .connection {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 8px;
        color: white;
        background-color: #f38ba8;
      }
      .connection.connected {
        background-color: #a6e3a1;
      }
      .status-circle {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 8px;
        background-color: #d20f39;
      }
      .connected .status-circle {
        background-color: #40a02b;
      }

      .chat-messages {
        flex: 1;
        overflow-y: scroll;
        padding: 20px;
        padding-bottom: 170px;
        display: flex;
        flex-direction: column;
        width: 100%;
      }

      .message {
        max-width: 80%;
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 20px;
        background-color: #e3e3e3;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        word-wrap: break-word;
      }
      .message.received {
        align-self: flex-start;
        background-color: #ffffff;
      }
      .message.sent {
        align-self: flex-end;
        background-color: #4a69bd;
        color: white;
      }
      .message-info {
        font-size: 0.8em;
        margin-bottom: 5px;
        opacity: 0.7;
      }
      .chat-input {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 100px;
        display: grid;
        grid-template-columns: 1fr auto;
        padding: 20px;
        background-color: white;
        border-top: 1px solid #e3e3e3;
      }
      #messageInput {
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 20px;
        font-size: 1em;
      }
      button {
        padding: 10px 20px;
        background-color: #4a69bd;
        color: white;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        font-size: 1em;
        margin-left: 10px;
      }
      button:hover {
        background-color: #3c5aa6;
      }

      .pane {
        position: fixed;
        top: 0;
        bottom: 0;
        width: 300px;
        background-color: #ccc;
        transform: translateX(-100%); /* Hidden by default */
        transition: transform 0.3s ease;
        z-index: 2;
      }

      .left-pane {
        left: 0;
      }

      .right-pane {
        right: 0;
        transform: translateX(100%); /* Hidden by default */
      }

      .pane.visible {
        transform: translateX(0); /* Fully visible */
      }

      .channel-list,
      .peer-list {
        padding: 16px;
        height: 100%;
        overflow-y: scroll;
      }
      .channel-item,
      .peer-item {
        padding: 4px 8px;
        border-radius: 4px;
        margin-bottom: 4px;
      }

      .channel-item {
        cursor: pointer;
      }
      .channel-item:hover {
        background-color: #d0d0d0;
      }
      .channel-item.active,
      .peer-item {
        background-color: #4a69bd;
        color: white;
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="overlay"></div>
      <div class="chat-header">
        <div class="chat-name">WebSocket Chat</div>
        <div class="connection">
          <div class="status-circle"></div>
          <div class="status-text">Disconnected</div>
        </div>
      </div>
      <div id="messages" class="chat-messages"></div>
      <div class="chat-input">
        <input type="text" id="messageInput" placeholder="Type a message..." />
        <button onclick="sendMessage()">Send</button>
      </div>
    </div>
    <div class="pane left-pane">
      <div class="pane-header">Channels</div>
      <div class="channel-list" id="channelList">
        <div class="channel-item" onclick="joinChannel('general')">General</div>
        <div class="channel-item" onclick="joinChannel('random')">Random</div>
        <div class="channel-item" onclick="joinChannel('tech')">Tech</div>
      </div>
    </div>
    <div class="pane right-pane">
      <div class="pane-header">Online</div>
      <div class="peer-list"></div>
    </div>

    <script>
      const wsProtocol = window.location.protocol === "https:" ? "wss:" : "ws:";
      const wsHost = window.location.host;
      // const wsHost = "localhost:4000";
      const socket = new WebSocket(`${wsProtocol}//${wsHost}/chat/ws`);

      const connectionStatus = document.querySelector(".connection");
      const connectionStatusText = document.querySelector(".status-text");

      const messages = document.getElementById("messages");
      const messageInput = document.getElementById("messageInput");

      let myId = null;
      let currentChannel = null;

      socket.onopen = function (e) {
        // addMessage("Connected to server", "System");
        connectionStatus.classList.add("connected");
        connectionStatusText.textContent = "Connected";

        joinChannel("general");
      };

      socket.onmessage = function (event) {
        const data = JSON.parse(event.data);
        switch (data.type) {
          case "connection":
            myId = data.client_id;
            connectionStatusText.textContent = `Connected [Client ID: ${myId}]`;
            break;
          case "joined":
            // addMessage(`Joined channel: ${data.channel}`, "System");
            currentChannel = data.channel;
            updateActiveChannel();
            requestHistory(currentChannel);
            break;
          case "left":
            // addMessage(`Left channel: ${data.channel}`, "System");
            if (currentChannel === data.channel) {
              currentChannel = null;
              updateActiveChannel();
            }

            while (messages.firstChild) {
              messages.removeChild(messages.lastChild);
            }
            break;
          case "history":
            data.messages.forEach((message) => {
              addMessage(
                message.content,
                message.from_id,
                message.from_ip,
                message.from_id === myId,
              );
            });
            break;
          case "peers":
            updatePeers(data.peers);
            break;
          case "message":
            addMessage(
              data.content,
              data.from_id,
              data.from_ip,
              data.from_id === myId,
            );
            break;
          case "ping":
            socket.send("pong");
            break;
          case "error":
            addMessage(`Error: ${data.message}`, "System");
            break;
        }
      };

      socket.onclose = function (event) {
        // addMessage("Disconnected from server", "System");
        connectionStatus.classList.remove("connected");
        connectionStatusText.textContent = "Disconnected";
      };

      function addMessage(message, fromId, fromIp, isSent) {
        const messageElement = document.createElement("div");
        messageElement.className = `message ${isSent ? "sent" : "received"}`;

        const infoElement = document.createElement("div");
        infoElement.className = "message-info";
        infoElement.textContent =
          fromId === "System" ? "System" : `${fromId} (${fromIp})`;

        const contentElement = document.createElement("div");
        contentElement.textContent = message;

        messageElement.appendChild(infoElement);
        messageElement.appendChild(contentElement);
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
      }

      function sendMessage() {
        const message = messageInput.value.trim();
        if (message && currentChannel) {
          socket.send(
            JSON.stringify({
              type: "message",
              channel: currentChannel,
              content: message,
            }),
          );
          messageInput.value = "";
        }
      }

      function joinChannel(channel) {
        if (currentChannel) {
          socket.send(
            JSON.stringify({
              type: "leave",
              channel: currentChannel,
            }),
          );
        }
        socket.send(
          JSON.stringify({
            type: "join",
            channel: channel,
          }),
        );
      }

      function updateActiveChannel() {
        const channels = document.querySelectorAll(".channel-item");
        channels.forEach((ch) => {
          ch.classList.remove("active");
          if (ch.textContent.trim().toLowerCase() === currentChannel) {
            ch.classList.add("active");
          }
        });
        closeLeftPane();
      }

      function requestHistory(channel) {
        const historyRequest = {
          type: "history",
          channel: channel,
        };
        socket.send(JSON.stringify(historyRequest));
      }

      function updatePeers(peers) {
        console.log(peers);

        const peerList = document.querySelector(".peer-list");
        while (peerList.firstChild) {
          peerList.removeChild(peerList.lastChild);
        }

        peers.forEach((peer) => {
          const peerItem = document.createElement("div");
          peerItem.className = "peer-item";
          peerItem.textContent = `${peer.id} (${peer.ip}) in ${peer.channels[0]}`;
          peerList.appendChild(peerItem);
        });
      }

      messageInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          sendMessage();
        }
      });

      // Swipe gesture functionality
      let touchStartX = 0;
      let touchEndX = 0;
      let touchStartY = 0;
      let touchEndY = 0;

      const minSwipeDistance = 50;
      const maxVerticalSwipeThreshold = 50; // Max Y movement to consider it a horizontal swipe

      const leftPane = document.querySelector(".left-pane");
      const rightPane = document.querySelector(".right-pane");
      const chatOverlay = document.querySelector(".overlay");

      let isLeftPaneOpen = false;
      let isRightPaneOpen = false;

      // Detect when touch starts
      document.addEventListener("touchstart", (e) => {
        touchStartX = e.changedTouches[0].screenX;
        touchStartY = e.changedTouches[0].screenY;
      });

      // Detect when touch ends
      document.addEventListener("touchend", (e) => {
        touchEndX = e.changedTouches[0].screenX;
        touchEndY = e.changedTouches[0].screenY;

        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;

        // Ignore if it's a vertical swipe
        if (Math.abs(deltaY) > maxVerticalSwipeThreshold) {
          return;
        }

        // Handle swipe to right (show left pane) or swipe to left (show right pane)
        if (!isLeftPaneOpen && !isRightPaneOpen) {
          // No panes are open; determine whether to open left or right pane
          if (deltaX > minSwipeDistance) {
            // Swiped right -> Open left pane
            openLeftPane();
          } else if (deltaX < -minSwipeDistance) {
            // Swiped left -> Open right pane
            openRightPane();
          }
        } else if (isLeftPaneOpen) {
          // If left pane is open, close it on right swipe
          if (deltaX < -minSwipeDistance) {
            closeLeftPane();
          }
        } else if (isRightPaneOpen) {
          // If right pane is open, close it on left swipe
          if (deltaX > minSwipeDistance) {
            closeRightPane();
          }
        }

        // Reset the swipe variables
        touchStartX = 0;
        touchEndX = 0;
        touchStartY = 0;
        touchEndY = 0;
      });

      // Function to open the left pane
      function openLeftPane() {
        leftPane.classList.add("visible");
        chatOverlay.classList.add("visible");
        isLeftPaneOpen = true;
        isRightPaneOpen = false;
      }

      // Function to open the right pane
      function openRightPane() {
        rightPane.classList.add("visible");
        chatOverlay.classList.add("visible");
        isRightPaneOpen = true;
        isLeftPaneOpen = false;
      }

      // Function to close the left pane
      function closeLeftPane() {
        leftPane.classList.remove("visible");
        chatOverlay.classList.remove("visible");
        isLeftPaneOpen = false;
      }

      // Function to close the right pane
      function closeRightPane() {
        rightPane.classList.remove("visible");
        chatOverlay.classList.remove("visible");
        isRightPaneOpen = false;
      }
    </script>
  </body>
</html>
