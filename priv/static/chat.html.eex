<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>WebSocket Chat</title>
    <style>
      :root {
        --base: #1e1e2e;
        --mantle: #181825;
        --crust: #11111b;
        --text: #cdd6f4;
        --subtext1: #bac2de;
        --subtext0: #a6adc8;
        --overlay0: #6c7086;
        --overlay1: #585b70;
        --overlay2: #45475a;
        --surface0: #313244;
        --surface1: #292c3c;
        --surface2: #252634;
        --blue: #1e66f5;
        --lavender: #b4befe;
        --pink: #f5c2e7;
        --green: #a6e3a1;
        --yellow: #f9e2af;
        --peach: #fab387;
        --red: #e78284;
        --maroon: #eba0ac;
        --teal: #94e2d5;
      }

      body {
        background-color: var(--base);
        color: var(--text);
      }

      .chat-container {
        background-color: var(--mantle);
      }

      .chat-header,
      .pane-header {
        background-color: var(--blue);
        color: var(--text);
      }

      .lucide-unlink {
        stroke: var(--red);
      }

      .lucide-link {
        stroke: var(--teal);
      }

      .status-text {
        color: #d20f39;
      }

      .connected .status-text {
        color: #40a02b;
      }

      .channel-header {
        background-color: var(--surface2);
        border-bottom: 1px solid var(--overlay0);
      }

      .chat-messages {
        background-color: var(--surface0);
      }

      .message {
        background-color: var(--surface1);
        color: var(--text);
      }

      .message.received {
        background-color: var(--mantle);
      }

      .message.sent {
        background-color: var(--blue);
        color: var(--text);
      }

      .chat-input {
        background-color: var(--surface2);
        border-top: 1px solid var(--overlay0);
      }

      .message-input {
        background-color: var(--mantle);
        color: var(--text);
        border: 1px solid var(--overlay0);
      }

      button {
        background-color: var(--blue);
        color: var(--text);
      }

      .pane {
        background-color: var(--surface1);
      }

      .channel-item {
        background-color: var(--surface0);
        color: var(--text);
      }

      .channel-item:hover {
        background-color: var(--surface2);
      }

      .channel-item.active,
      .peer-item {
        background-color: var(--blue);
        color: var(--text);
      }

      .peer-item.self {
        background-color: var(--teal);
        color: var(--surface2);
      }

      .overlay {
        background-color: var(--crust);
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        height: 100vh;
        overflow: hidden;
        font-family: Arial, sans-serif;
        position: relative;
      }
      .chat-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        position: relative;
      }

      .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: none;
        opacity: 0.5;
        z-index: 1;
      }
      .overlay.visible {
        display: block;
      }

      .chat-header,
      .pane-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px;
        text-align: center;
        font-size: 1.5em;
      }
      .lucide-link,
      .lucide-unlink {
        display: none;
      }
      .lucide-link.visible,
      .lucide-unlink.visible {
        display: block;
      }
      .connection {
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 8px;
      }
      .status-circle {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 8px;
      }

      .channel-header {
        text-align: center;
        padding: 8px;
        font-size: 1.25rem;
      }
      .chat-messages {
        flex: 1;
        overflow-y: scroll;
        padding: 20px;
        padding-bottom: 170px;
        display: flex;
        flex-direction: column;
        width: 100%;
      }

      .message {
        max-width: 80%;
        margin-bottom: 15px;
        padding: 10px 15px;
        border-radius: 20px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        word-wrap: break-word;
      }
      .message.received {
        align-self: flex-start;
      }
      .message.sent {
        align-self: flex-end;
      }
      .message-info {
        font-size: 0.8em;
        margin-bottom: 5px;
        opacity: 0.7;
      }
      .chat-input {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        height: 100px;
        display: grid;
        grid-template-columns: 1fr auto;
        padding: 20px;
      }
      .message-input {
        padding: 10px;
        border-radius: 20px;
        font-size: 1em;
      }

      button {
        border: none;
        cursor: pointer;
      }
      .send-message {
        padding: 10px 20px;
        border-radius: 20px;
        font-size: 1em;
        margin-left: 10px;
      }

      .pane {
        position: fixed;
        top: 0;
        bottom: 0;
        width: 300px;
        transform: translateX(-100%); /* Hidden by default */
        transition: transform 0.3s ease;
        z-index: 2;
      }

      .left-pane {
        left: 0;
      }

      .right-pane {
        right: 0;
        transform: translateX(100%); /* Hidden by default */
      }

      .pane.visible {
        transform: translateX(0); /* Fully visible */
      }

      .channel-list,
      .peer-list {
        padding: 16px;
        height: 100%;
        overflow-y: scroll;
      }
      .channel-item,
      .peer-item {
        padding: 4px 8px;
        border-radius: 4px;
        margin-bottom: 4px;
      }

      .channel-item {
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <div class="chat-container">
      <div class="overlay"></div>
      <div class="chat-header">
        <button class="open-channels-pane">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-menu"
          >
            <line x1="4" x2="20" y1="12" y2="12" />
            <line x1="4" x2="20" y1="6" y2="6" />
            <line x1="4" x2="20" y1="18" y2="18" />
          </svg>
        </button>
        <div class="chat-name">WebSocket Chat</div>
        <button class="open-peers-pane">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-link"
          >
            <path
              d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
            />
            <path
              d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
            />
          </svg>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="lucide lucide-unlink visible"
          >
            <path
              d="m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71"
            />
            <path
              d="m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71"
            />
            <line x1="8" x2="8" y1="2" y2="5" />
            <line x1="2" x2="5" y1="8" y2="8" />
            <line x1="16" x2="16" y1="19" y2="22" />
            <line x1="19" x2="22" y1="16" y2="16" />
          </svg>
        </button>
      </div>
      <div class="channel-header"></div>
      <div class="chat-messages"></div>
      <div class="chat-input">
        <input
          type="text"
          class="message-input"
          placeholder="Type a message..."
        />
        <button class="send-message" onclick="sendMessage()">Send</button>
      </div>
    </div>
    <div class="pane left-pane">
      <div class="pane-header">Channels</div>
      <div class="channel-list"></div>
    </div>
    <div class="pane right-pane">
      <div class="pane-header">Online</div>
      <div class="peer-list"></div>
    </div>

    <script>
      const wsProtocol = window.location.protocol === "https:" ? "wss:" : "ws:";
      const wsHost = window.location.host;
      // const wsHost = "localhost:4000";
      const socket = new WebSocket(`${wsProtocol}//${wsHost}/chat/ws`);

      const channelsPaneButton = document.querySelector(".open-channels-pane");
      const peersPaneButton = document.querySelector(".open-peers-pane");

      const channelHeader = document.querySelector(".channel-header");
      const messages = document.querySelector(".chat-messages");
      const messageInput = document.querySelector(".message-input");

      let myId = null;
      let currentChannel = null;

      socket.onopen = function (e) {
        document.querySelector(".lucide-link").classList.add("visible");
        document.querySelector(".lucide-unlink").classList.remove("visible");
      };

      socket.onmessage = function (event) {
        const data = JSON.parse(event.data);
        switch (data.type) {
          case "connection":
            myId = data.client_id;
            break;
          case "joined":
            currentChannel = data.channel;
            updateActiveChannel();
            requestHistory(currentChannel.id);
            break;
          case "left":
            if (currentChannel.id === data.channelId) {
              currentChannel = null;
            }

            while (messages.firstChild) {
              messages.removeChild(messages.lastChild);
            }
            break;
          case "channels":
            updateChannels(data.channels);
            joinChannel(data.channels[0].id);
            break;
          case "history":
            data.messages.forEach((message) => {
              addMessage(
                message.content,
                message.author,
                message.author === myId,
              );
            });
            break;
          case "peers":
            updatePeers(data.peers);
            break;
          case "message":
            addMessage(data.content, data.author, data.author === myId);
            break;
          case "error":
            addMessage(`Error: ${data.message}`, "System");
            break;
        }
      };

      socket.onclose = function (event) {
        document.querySelector(".lucide-link").classList.remove("visible");
        document.querySelector(".lucide-unlink").classList.add("visible");
      };

      function addMessage(content, author, isSent) {
        const messageElement = document.createElement("div");
        messageElement.className = `message ${isSent ? "sent" : "received"}`;

        const infoElement = document.createElement("div");
        infoElement.className = "message-info";
        infoElement.textContent = author === "System" ? "System" : author;

        const contentElement = document.createElement("div");
        contentElement.textContent = content;

        messageElement.appendChild(infoElement);
        messageElement.appendChild(contentElement);
        messages.appendChild(messageElement);
        messages.scrollTop = messages.scrollHeight;
      }

      function sendMessage() {
        const message = messageInput.value.trim();
        if (message && currentChannel) {
          socket.send(
            JSON.stringify({
              type: "message",
              channelId: currentChannel.id,
              content: message,
            }),
          );
          messageInput.value = "";
        }
      }

      function joinChannel(channelId) {
        if (currentChannel) {
          socket.send(
            JSON.stringify({
              type: "leave",
              channelId: currentChannel.id,
            }),
          );
        }

        socket.send(
          JSON.stringify({
            type: "join",
            channelId: channelId,
          }),
        );
      }

      function updateActiveChannel() {
        const channels = document.querySelectorAll(".channel-item");
        channels.forEach((ch) => {
          ch.classList.remove("active");
          if (ch.textContent.trim().toLowerCase() === currentChannel.name) {
            ch.classList.add("active");
          }
        });
        closeLeftPane();
        channelHeader.textContent = currentChannel.name;
      }

      function requestHistory(channelId) {
        const historyRequest = {
          type: "history",
          channelId: channelId,
        };
        socket.send(JSON.stringify(historyRequest));
      }

      function updatePeers(peers) {
        const peerList = document.querySelector(".peer-list");
        while (peerList.firstChild) {
          peerList.removeChild(peerList.lastChild);
        }

        peers.forEach((peer) => {
          const peerItem = document.createElement("div");
          peerItem.className = "peer-item";
          peerItem.textContent = `${peer.id} (${peer.ip}) in ${peer.channels[0].name}`;
          peerList.appendChild(peerItem);

          if (peer.id === myId) {
            peerItem.classList.add("self");
          }
        });
      }

      function updateChannels(channels) {
        const channelList = document.querySelector(".channel-list");
        while (channelList.firstChild) {
          channelList.removeChild(channelList.lastChild);
        }

        channels.forEach((channel) => {
          const channelItem = document.createElement("div");
          channelItem.className = "channel-item";
          channelItem.textContent = channel.name;
          channelItem.addEventListener("click", () => joinChannel(channel.id));
          channelList.appendChild(channelItem);
        });
      }

      messageInput.addEventListener("keypress", function (e) {
        if (e.key === "Enter") {
          sendMessage();
        }
      });

      // Panes
      const leftPane = document.querySelector(".left-pane");
      const rightPane = document.querySelector(".right-pane");
      const chatOverlay = document.querySelector(".overlay");

      let isLeftPaneOpen = false;
      let isRightPaneOpen = false;
      channelsPaneButton.addEventListener("click", () => {
        openLeftPane();
      });
      peersPaneButton.addEventListener("click", () => {
        openRightPane();
      });
      chatOverlay.addEventListener("click", () => {
        closeLeftPane();
        closeRightPane();
      });

      // Swipe gesture functionality
      let touchStartX = 0;
      let touchEndX = 0;
      let touchStartY = 0;
      let touchEndY = 0;

      const minSwipeDistance = 50;
      const maxVerticalSwipeThreshold = 50; // Max Y movement to consider it a horizontal swipe

      // Detect when touch starts
      document.addEventListener("touchstart", (e) => {
        touchStartX = e.changedTouches[0].screenX;
        touchStartY = e.changedTouches[0].screenY;
      });

      // Detect when touch ends
      document.addEventListener("touchend", (e) => {
        touchEndX = e.changedTouches[0].screenX;
        touchEndY = e.changedTouches[0].screenY;

        const deltaX = touchEndX - touchStartX;
        const deltaY = touchEndY - touchStartY;

        // Ignore if it's a vertical swipe
        if (Math.abs(deltaY) > maxVerticalSwipeThreshold) {
          return;
        }

        // Handle swipe to right (show left pane) or swipe to left (show right pane)
        if (!isLeftPaneOpen && !isRightPaneOpen) {
          // No panes are open; determine whether to open left or right pane
          if (deltaX > minSwipeDistance) {
            // Swiped right -> Open left pane
            openLeftPane();
          } else if (deltaX < -minSwipeDistance) {
            // Swiped left -> Open right pane
            openRightPane();
          }
        } else if (isLeftPaneOpen) {
          // If left pane is open, close it on right swipe
          if (deltaX < -minSwipeDistance) {
            closeLeftPane();
          }
        } else if (isRightPaneOpen) {
          // If right pane is open, close it on left swipe
          if (deltaX > minSwipeDistance) {
            closeRightPane();
          }
        }

        // Reset the swipe variables
        touchStartX = 0;
        touchEndX = 0;
        touchStartY = 0;
        touchEndY = 0;
      });

      // Function to open the left pane
      function openLeftPane() {
        leftPane.classList.add("visible");
        chatOverlay.classList.add("visible");
        isLeftPaneOpen = true;
        isRightPaneOpen = false;
      }

      // Function to open the right pane
      function openRightPane() {
        rightPane.classList.add("visible");
        chatOverlay.classList.add("visible");
        isRightPaneOpen = true;
        isLeftPaneOpen = false;
      }

      // Function to close the left pane
      function closeLeftPane() {
        leftPane.classList.remove("visible");
        chatOverlay.classList.remove("visible");
        isLeftPaneOpen = false;
      }

      // Function to close the right pane
      function closeRightPane() {
        rightPane.classList.remove("visible");
        chatOverlay.classList.remove("visible");
        isRightPaneOpen = false;
      }
    </script>
  </body>
</html>
